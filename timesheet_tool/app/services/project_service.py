from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from app.db.models import Project, User
from app.db.schemas import ProjectCreate
from sqlalchemy.exc import SQLAlchemyError 
from fastapi import HTTPException 
from sqlalchemy.orm import selectinload

async def create_project(project_data: ProjectCreate, user: User, db: AsyncSession) -> Project:
    """
    Create a new project for a user.
    """
    if not user:
        raise HTTPException(status_code=401, detail="User not authenticated")
    
    # Create a new Project instance with owner_id
    new_project = Project(
        name=project_data.name,
        description=project_data.description,
        owner_id=user.id,  # Assign the authenticated user's ID as the owner_id
    )
    
    try:
        # Add the new project to the database
        db.add(new_project)
        await db.commit()  # Commit the transaction
        await db.refresh(new_project)  # Refresh to get the new ID and other autogenerated fields
        
        return new_project
    except SQLAlchemyError as e:
        await db.rollback()  # Rollback the transaction in case of error
        error_message = {
            "message": "Failed to create the project",
            "error": str(e),
        }
        # Raise an HTTPException with detailed error info
        raise HTTPException(status_code=500, detail=error_message)

async def get_projects_by_user(user: User, db: AsyncSession):
    """
    Retrieve all projects owned by a specific user along with their time entries.
    """

    if not user:
        raise HTTPException(status_code=401, detail="User not authenticated")

    query = select(Project).options(selectinload(Project.time_entries)).where(Project.owner_id == user.id)
    result = await db.execute(query)
    results = result.scalars().all()

    if not results:
        return {"message": "No projects found"}
    
    
    return results
